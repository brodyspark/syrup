# WORK IN PROGRESS COMPILER PORT TO SYRUP
# Featuring such features like destructuring assignment
# and actual method calls

chunker = {
	"leftbracket": 	/^\[/
	"rightbracket": /^\]/
	"leftparen": 	/^\(/
	"rightparen": 	/^\)[;:]?/
	"leftbrace": 	/^\{/
	"rightbrace": 	/^\}/
	"quote": 		/^`/
	"indent": 		/^\n[\t ]*/
	"string": 		/^("([^\\"]|\\\\|\\")*"|'([^\\']|\\\\|\\')*')[:]?/
	"regex": 		/^\/([^\\\/]|\\\\|\\\/)*\//
	"callargs": 	/^[a-zA-Z_?!+\-\/*=\.]+[:]/
	"call": 		/^[a-zA-Z_?!+\-\/*=\.]+[;]/
	"atom": 		/^[a-zA-Z_?!+\-\/*=\.]+/
	"comma": 		/^,/
	"semicolon":	/^;/
	"null": 		/^null/
	"bool": 		/^true|^false/
	"number": 		/^[0-9+]+/
	"comment": 		/^\#[^\n]+/
	}

tokenize = fn: [code]
	loop: [code, tokens = []]
		[patt, k] = first: reduce: (fn: [patt, k] patt.test: code) chunker
		[token] = patt.exec: code
		if: code.length > token.length
			continue:
				code.substr: token.length ;.replace: /^[\t ]+/, ''
				concat: [k, token], tokens
			tokens

print: tokenize: "print: 'hello'"