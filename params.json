{"name":"Syrup","body":"### Syrup, a syntactically-light LISP\r\n\r\n    fib = fn: [n]\r\n        calc-fib = fn: [n a b]\r\n            if: (n == 0)\r\n                a \r\n                calc-fib: (n - 1) b (a + b)\r\n        calc-fib: n 0 1\r\n\r\n    print: fib: 10\r\n\r\n### Syntax\r\n\r\nSyrup is whitespace-significant. Function calls are made by a colon\r\nfollowing an atom. All subsequent arguments on a line are passed to the\r\nfunction until a newline of the same indentation, the end of a parenthetical,\r\nor a period `.`\r\n\r\n    print: \"Cool language x\" 5000  # Parses as (print \"Cool language x\" 5000)\r\n    print:                         # Equivalent\r\n        \"Cool language x\"\r\n        5000\r\n    print: square: 5. square: 6.   # \"25\", \"36\"\r\n\r\nParentheses are for disambiguation, and are insignificant. \r\nCommas are allowed, but not required.\r\n\r\n    calc-fib: (n - 1) b (a + b)\r\n    calc-fib: n - 1, b, a + b\r\n\r\nVector (array) syntax is like JavaScript's array literals. Vectors\r\nare not executed as functions.\r\n\r\n    [5 6 7 8] # equivalent to list: 5 6 7 8\r\n\r\nQuoting uses \\`.\r\n\r\n    print: `apples                 # prints \"apples\"\r\n\r\nInfix notation is supported for arithmetic operations\r\nand for the assign operator:\r\n\r\n    5 + 6                          # these two lines are\r\n    (+: 5 6)                       # equivalent\r\n    test = fn: [] print: 'hi'      # declares the function 'test'\r\n\r\nMacros are supported:\r\n\r\n    unless = macro: [cond t f]\r\n      [`if cond f t]\r\n\r\n    print: unless: true \"false value\" \"true value\"\r\n\r\nObject literals can be defined using quoted strings or string variables\r\nas keys (as in python). Any arguments after the first passed to a string\r\nfunction have their properties copied to the new object literal. Finally,\r\ncurly-braces combine all listed objects into one.\r\n \r\n    \"a\": 1                         # JSON: {\"a\": 1}\r\n    (\"some\" + \"key\"): \"val\"        # JSON: {\"somekey\": \"val\"}\r\n    obj = \"b\": 2 \"c\": 3            # parses to (\"b\" 2 (\"c\" 3)) and JSON: {\"b\": 2, \"c\": 3}\r\n    obj2 = {\"a\": 1, obj}           # parses to (combine (\"a\", 1) obj) and JSON: {\"a\": 1, \"b\": 2, \"c\": 3}\r\n\r\n### TODO\r\n\r\nREPL, and lots more bikeshedding.","tagline":"A CoffeeScript-inspired LISP, for funsies.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}